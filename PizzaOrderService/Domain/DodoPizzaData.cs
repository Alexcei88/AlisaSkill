// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using PizzaOrderService.Domain;
//
//    var dodoPizzaData = DodoPizzaData.FromJson(jsonString);

namespace PizzaOrderService.Domain.Dodo
{
    using System;
    using System.Collections.Generic;
    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class DodoPizzaData
    {
        [JsonProperty("pageName")]
        public string PageName { get; set; }

        [JsonProperty("currentUrl")]
        public string CurrentUrl { get; set; }

        [JsonProperty("corePageData")]
        public CorePageData CorePageData { get; set; }

        [JsonProperty("cartUrl")]
        public string CartUrl { get; set; }

        [JsonProperty("ownPizzaBuilderUrl")]
        public string OwnPizzaBuilderUrl { get; set; }

        [JsonProperty("halfPizzaBuilderUrl")]
        public string HalfPizzaBuilderUrl { get; set; }

        [JsonProperty("menu")]
        public Menu Menu { get; set; }

        [JsonProperty("pizzerias")]
        public Pizzeria[] Pizzerias { get; set; }

        [JsonProperty("rules")]
        public Rules Rules { get; set; }

        [JsonProperty("banners")]
        public Banner[] Banners { get; set; }

        [JsonProperty("currentVisitingPizzeria")]
        public Pizzeria CurrentVisitingPizzeria { get; set; }

        [JsonProperty("materialTypeGroups")]
        public object[] MaterialTypeGroups { get; set; }

        [JsonProperty("ownPizzaAdded")]
        public bool OwnPizzaAdded { get; set; }

        [JsonProperty("materialTypes")]
        public object[] MaterialTypes { get; set; }

        [JsonProperty("serverTime")]
        public long ServerTime { get; set; }
    }

    public partial class Banner
    {
        [JsonProperty("imageUrl")]
        public Uri ImageUrl { get; set; }

        [JsonProperty("priority")]
        public long Priority { get; set; }

        [JsonProperty("link")]
        public object Link { get; set; }
    }

    public partial class CorePageData
    {
        [JsonProperty("country")]
        public Country Country { get; set; }

        [JsonProperty("currentLocalityId")]
        public Guid CurrentLocalityId { get; set; }

        [JsonProperty("currentPizzeriaId")]
        public Guid CurrentPizzeriaId { get; set; }

        [JsonProperty("localities")]
        public Locality[] Localities { get; set; }

        [JsonProperty("localization")]
        public Localization Localization { get; set; }

        [JsonProperty("routes")]
        public Dictionary<string, Route> Routes { get; set; }

        [JsonProperty("menuCategories")]
        public MenuCategories MenuCategories { get; set; }

        [JsonProperty("callCenterPhoneParameters")]
        public CallCenterPhoneParameters CallCenterPhoneParameters { get; set; }

        [JsonProperty("socialNetworkLinks")]
        public SocialNetworkLink[] SocialNetworkLinks { get; set; }

        [JsonProperty("jobSiteLink")]
        public Uri JobSiteLink { get; set; }

        [JsonProperty("recaptchaSiteKey")]
        public string RecaptchaSiteKey { get; set; }
    }

    public partial class CallCenterPhoneParameters
    {
        [JsonProperty("isFreeCall")]
        public bool IsFreeCall { get; set; }

        [JsonProperty("callCenterPhones")]
        public CallCenterPhone[] CallCenterPhones { get; set; }
    }

    public partial class CallCenterPhone
    {
        [JsonProperty("number")]
        public string Number { get; set; }

        [JsonProperty("numberWithoutMarks")]
        public string NumberWithoutMarks { get; set; }

        [JsonProperty("iconPath")]
        public Uri IconPath { get; set; }
    }

    public partial class Country
    {
        [JsonProperty("code")]
        public long Code { get; set; }

        [JsonProperty("codeString")]
        public string CodeString { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("currency")]
        public Currency Currency { get; set; }

        [JsonProperty("phoneMask")]
        public string PhoneMask { get; set; }

        [JsonProperty("mobilePhoneExample")]
        public string MobilePhoneExample { get; set; }

        [JsonProperty("pizzaSizes")]
        public PizzaSize[] PizzaSizes { get; set; }

        [JsonProperty("availableLanguages")]
        public AvailableLanguage[] AvailableLanguages { get; set; }

        [JsonProperty("deliveryParameters")]
        public DeliveryParameters DeliveryParameters { get; set; }

        [JsonProperty("feedbackEmail")]
        public string FeedbackEmail { get; set; }
    }

    public partial class AvailableLanguage
    {
        [JsonProperty("code")]
        public string Code { get; set; }

        [JsonProperty("url")]
        public string Url { get; set; }
    }

    public partial class Currency
    {
        [JsonProperty("code")]
        public string Code { get; set; }
    }

    public partial class DeliveryParameters
    {
        [JsonProperty("minutesForGuaranteedDelivery")]
        public long MinutesForGuaranteedDelivery { get; set; }

        [JsonProperty("minutesForApproximateDelivery")]
        public long MinutesForApproximateDelivery { get; set; }

        [JsonProperty("extensionWorkTimeInMinutes")]
        public long ExtensionWorkTimeInMinutes { get; set; }

        [JsonProperty("minutesForPrepareDelayedOrder")]
        public long MinutesForPrepareDelayedOrder { get; set; }

        [JsonProperty("averageOrderCookingTimeInMinutes")]
        public long AverageOrderCookingTimeInMinutes { get; set; }
    }

    public partial class PizzaSize
    {
        [JsonProperty("productSizeGroup")]
        public long ProductSizeGroup { get; set; }

        [JsonProperty("value")]
        public long Value { get; set; }

        [JsonProperty("doughTypes")]
        public long[] DoughTypes { get; set; }
    }

    public partial class Locality
    {
        [JsonProperty("id")]
        public Guid Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("translitAlias")]
        public string TranslitAlias { get; set; }

        [JsonProperty("url")]
        public string Url { get; set; }

        [JsonProperty("deliveryZoneMapUrl")]
        public Uri DeliveryZoneMapUrl { get; set; }

        [JsonProperty("timeZoneOffsetInSeconds")]
        public long TimeZoneOffsetInSeconds { get; set; }

        [JsonProperty("menuSpecializationType")]
        public long MenuSpecializationType { get; set; }
    }

    public partial class Localization
    {
        [JsonProperty("currentLanguageCode")]
        public CurrentLanguageCode CurrentLanguageCode { get; set; }

        [JsonProperty("availableLanguages")]
        public AvailableLanguage[] AvailableLanguages { get; set; }
    }

    public partial class MenuCategories
    {
        [JsonProperty("combos")]
        public bool Combos { get; set; }

        [JsonProperty("pizzas")]
        public bool Pizzas { get; set; }

        [JsonProperty("snacks")]
        public bool Snacks { get; set; }

        [JsonProperty("desserts")]
        public bool Desserts { get; set; }

        [JsonProperty("drinks")]
        public bool Drinks { get; set; }

        [JsonProperty("goods")]
        public bool Goods { get; set; }
    }

    public partial class Route
    {
        [JsonProperty("url")]
        public string Url { get; set; }

        [JsonProperty("seoInfo")]
        public SeoInfo SeoInfo { get; set; }
    }

    public partial class SeoInfo
    {
        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("metaDescription")]
        public string MetaDescription { get; set; }

        [JsonProperty("metaOgTitle")]
        public string MetaOgTitle { get; set; }

        [JsonProperty("metaOgDescription")]
        public string MetaOgDescription { get; set; }

        [JsonProperty("metaOgUrl")]
        public string MetaOgUrl { get; set; }

        [JsonProperty("metaOgImage")]
        public Uri MetaOgImage { get; set; }
    }

    public partial class SocialNetworkLink
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("url")]
        public Uri Url { get; set; }
    }

    public partial class Pizzeria
    {
        [JsonProperty("id")]
        public Guid Id { get; set; }

        [JsonProperty("uuid")]
        public string Uuid { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("translitAlias")]
        public string TranslitAlias { get; set; }

        [JsonProperty("alias")]
        public string Alias { get; set; }

        [JsonProperty("address")]
        public Address Address { get; set; }

        [JsonProperty("menuRoute")]
        public Route MenuRoute { get; set; }

        [JsonProperty("contactsRoute")]
        public Route ContactsRoute { get; set; }

        [JsonProperty("takesCarryoutOrders")]
        public bool TakesCarryoutOrders { get; set; }

        [JsonProperty("managerPhoneNumber")]
        public string ManagerPhoneNumber { get; set; }

        [JsonProperty("nextOpenTime")]
        public NextOpenTime NextOpenTime { get; set; }

        [JsonProperty("metroStations")]
        public object[] MetroStations { get; set; }

        [JsonProperty("restaurantSchedule")]
        public Schedule[] RestaurantSchedule { get; set; }

        [JsonProperty("deliverySchedule")]
        public Schedule[] DeliverySchedule { get; set; }

        [JsonProperty("operatingTypes")]
        public long[] OperatingTypes { get; set; }

        [JsonProperty("webcamSettings")]
        public WebcamSettings WebcamSettings { get; set; }
    }

    public partial class Address
    {
        [JsonProperty("streetId")]
        public Guid StreetId { get; set; }

        [JsonProperty("houseNumber")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long HouseNumber { get; set; }

        [JsonProperty("street")]
        public Street Street { get; set; }
    }

    public partial class Street
    {
        [JsonProperty("id")]
        public Guid Id { get; set; }

        [JsonProperty("localityName")]
        public string LocalityName { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("hasHouseFilter")]
        public bool HasHouseFilter { get; set; }

        [JsonProperty("streetType")]
        public long StreetType { get; set; }

        [JsonProperty("shortStreetTypeName")]
        public string ShortStreetTypeName { get; set; }

        [JsonProperty("fullStreetTypeName")]
        public string FullStreetTypeName { get; set; }
    }

    public partial class Schedule
    {
        [JsonProperty("startDay")]
        public long StartDay { get; set; }

        [JsonProperty("endDay")]
        public long EndDay { get; set; }

        [JsonProperty("openTime")]
        public string OpenTime { get; set; }

        [JsonProperty("closeTime")]
        public string CloseTime { get; set; }

        [JsonProperty("isFullDay")]
        public bool IsFullDay { get; set; }

        [JsonProperty("openTimeValue")]
        public string OpenTimeValue { get; set; }

        [JsonProperty("closeTimeValue")]
        public string CloseTimeValue { get; set; }
    }

    public partial class NextOpenTime
    {
        [JsonProperty("isTomorrow")]
        public bool IsTomorrow { get; set; }

        [JsonProperty("openTimeFormated")]
        public string OpenTimeFormated { get; set; }
    }

    public partial class WebcamSettings
    {
        [JsonProperty("serverId")]
        public string ServerId { get; set; }

        [JsonProperty("cameraId")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long CameraId { get; set; }
    }

    public partial class Menu
    {
        [JsonProperty("pizzas")]
        public Pizza[] Pizzas { get; set; }

        [JsonProperty("snacks")]
        public Dessert[] Snacks { get; set; }

        [JsonProperty("desserts")]
        public Dessert[] Desserts { get; set; }

        [JsonProperty("drinks")]
        public Dessert[] Drinks { get; set; }

        [JsonProperty("sauces")]
        public Dessert[] Sauces { get; set; }

        [JsonProperty("goods")]
        public Dessert[] Goods { get; set; }

        [JsonProperty("combos")]
        public ComboElement[] Combos { get; set; }

        [JsonProperty("pizzaSizes")]
        public long[] PizzaSizes { get; set; }

        [JsonProperty("ownPizza")]
        public object OwnPizza { get; set; }
    }

    public partial class ComboElement
    {
        [JsonProperty("combo")]
        public ComboCombo Combo { get; set; }

        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("price")]
        public MaxPriceByCash Price { get; set; }

        [JsonProperty("priority")]
        public long Priority { get; set; }

        [JsonProperty("isInStopList")]
        public bool IsInStopList { get; set; }
    }

    public partial class ComboCombo
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("uuId")]
        public object UuId { get; set; }

        [JsonProperty("systemName")]
        public string SystemName { get; set; }

        [JsonProperty("clientName")]
        public string ClientName { get; set; }

        [JsonProperty("promoDescription")]
        public string PromoDescription { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("weight")]
        public string Weight { get; set; }

        [JsonProperty("comboImages")]
        public Image[] ComboImages { get; set; }

        [JsonProperty("products")]
        public ComboProduct[] Products { get; set; }
    }

    public partial class Image
    {
        [JsonProperty("uuId")]
        public string UuId { get; set; }

        [JsonProperty("productUUId")]
        public string ProductUuId { get; set; }

        [JsonProperty("cultureName")]
        public CurrentLanguageCode CultureName { get; set; }

        [JsonProperty("size")]
        public long Size { get; set; }

        [JsonProperty("url")]
        public Uri Url { get; set; }

        [JsonProperty("height")]
        public long Height { get; set; }

        [JsonProperty("width")]
        public long Width { get; set; }
    }

    public partial class ComboProduct
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("uuId")]
        public string UuId { get; set; }
    }

    public partial class MaxPriceByCash
    {
        [JsonProperty("value")]
        public long Value { get; set; }

        [JsonProperty("formatedValue")]
        public string FormatedValue { get; set; }
    }

    public partial class Dessert
    {
        [JsonProperty("product")]
        public PizzaHalfProduct Product { get; set; }

        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("price")]
        public MaxPriceByCash Price { get; set; }

        [JsonProperty("priority")]
        public long Priority { get; set; }

        [JsonProperty("isInStopList")]
        public bool IsInStopList { get; set; }

        [JsonProperty("materialTypeGroups")]
        public object[] MaterialTypeGroups { get; set; }

        [JsonProperty("pizzaHalves", NullValueHandling = NullValueHandling.Ignore)]
        public PizzaHalf[] PizzaHalves { get; set; }
    }

    public partial class PizzaHalf
    {
        [JsonProperty("uuId")]
        public string UuId { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("price")]
        public MaxPriceByCash Price { get; set; }

        [JsonProperty("product")]
        public PizzaHalfProduct Product { get; set; }

        [JsonProperty("isInStopList")]
        public bool IsInStopList { get; set; }
    }

    public partial class PizzaHalfProduct
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("category")]
        public long Category { get; set; }

        [JsonProperty("photos")]
        public Photos Photos { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("foodValue")]
        public FoodValue FoodValue { get; set; }

        [JsonProperty("size")]
        public Size Size { get; set; }

        [JsonProperty("allergens")]
        public Allergens Allergens { get; set; }

        [JsonProperty("allergensCanContain")]
        public string AllergensCanContain { get; set; }

        [JsonProperty("ingredients")]
        public Ingredient[] Ingredients { get; set; }

        [JsonProperty("productImages")]
        public Image[] ProductImages { get; set; }
    }

    public partial class FoodValue
    {
        [JsonProperty("fats")]
        public string Fats { get; set; }

        [JsonProperty("proteins")]
        public string Proteins { get; set; }

        [JsonProperty("carbohydrates")]
        public string Carbohydrates { get; set; }

        [JsonProperty("kiloCalories")]
        public string KiloCalories { get; set; }

        [JsonProperty("weight")]
        public string Weight { get; set; }
    }

    public partial class Ingredient
    {
        [JsonProperty("id")]
        public Guid Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("isRemovable")]
        public bool IsRemovable { get; set; }
    }

    public partial class Photos
    {
        [JsonProperty("menuImageUrl")]
        public object MenuImageUrl { get; set; }

        [JsonProperty("mobileMenuImageUrl")]
        public object MobileMenuImageUrl { get; set; }
    }

    public partial class Size
    {
        [JsonProperty("measure")]
        public long Measure { get; set; }

        [JsonProperty("value")]
        public double Value { get; set; }
    }

    public partial class Pizza
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("category")]
        public long Category { get; set; }

        [JsonProperty("products")]
        public PizzaProduct[] Products { get; set; }

        [JsonProperty("photos")]
        public Photos Photos { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("compositionDescription")]
        public string CompositionDescription { get; set; }

        [JsonProperty("priority")]
        public long Priority { get; set; }

        [JsonProperty("sizes")]
        public long[] Sizes { get; set; }

        [JsonProperty("productDetailsUrl")]
        public object ProductDetailsUrl { get; set; }

        [JsonProperty("isOwnPizza")]
        public bool IsOwnPizza { get; set; }

        [JsonProperty("isHalfPizza")]
        public bool IsHalfPizza { get; set; }
    }

    public partial class PizzaProduct
    {
        [JsonProperty("sizeGroup")]
        public long SizeGroup { get; set; }

        [JsonProperty("dough")]
        public long Dough { get; set; }

        [JsonProperty("menuProduct")]
        public Dessert MenuProduct { get; set; }
    }

    public partial class Rules
    {
        [JsonProperty("minPrice")]
        public MaxPriceByCash MinPrice { get; set; }

        [JsonProperty("maxPriceByCash")]
        public MaxPriceByCash MaxPriceByCash { get; set; }
    }

    public enum CurrentLanguageCode
    {
        RuRu
    };

    public enum Allergens
    {
        Empty,
        МолочныеПродукты
    };

    public partial class DodoPizzaData
    {
        public static DodoPizzaData FromJson(string json) =>
            JsonConvert.DeserializeObject<DodoPizzaData>(json, Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this DodoPizzaData self) => JsonConvert.SerializeObject(self, Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                CurrentLanguageCodeConverter.Singleton,
                AllergensConverter.Singleton,
                new IsoDateTimeConverter {DateTimeStyles = DateTimeStyles.AssumeUniversal}
            },
        };
    }

    internal class CurrentLanguageCodeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) =>
            t == typeof(CurrentLanguageCode) || t == typeof(CurrentLanguageCode?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "ru-RU")
            {
                return CurrentLanguageCode.RuRu;
            }

            throw new Exception("Cannot unmarshal type CurrentLanguageCode");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }

            var value = (CurrentLanguageCode) untypedValue;
            if (value == CurrentLanguageCode.RuRu)
            {
                serializer.Serialize(writer, "ru-RU");
                return;
            }

            throw new Exception("Cannot marshal type CurrentLanguageCode");
        }

        public static readonly CurrentLanguageCodeConverter Singleton = new CurrentLanguageCodeConverter();
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }

            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }

            var value = (long) untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    internal class AllergensConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Allergens) || t == typeof(Allergens?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "":
                    return Allergens.Empty;
                case "Молочные продукты":
                    return Allergens.МолочныеПродукты;
            }

            throw new Exception("Cannot unmarshal type Allergens");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }

            var value = (Allergens) untypedValue;
            switch (value)
            {
                case Allergens.Empty:
                    serializer.Serialize(writer, "");
                    return;
                case Allergens.МолочныеПродукты:
                    serializer.Serialize(writer, "Молочные продукты");
                    return;
            }

            throw new Exception("Cannot marshal type Allergens");
        }

        public static readonly AllergensConverter Singleton = new AllergensConverter();
    }
}